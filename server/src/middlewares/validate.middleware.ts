import { plainToInstance } from 'class-transformer';
import { validate } from 'class-validator';
import { Request, Response, NextFunction } from 'express';
import { ResponseHandler } from './response-handler.middleware';

export const validateDto = (DtoClass: any, source: 'body' | 'query' | 'params' = 'body') => {
    return async (req: Request, res: Response, next: NextFunction): Promise<any> => {
        try {
             // üîπ L·∫•y d·ªØ li·ªáu t·ª´ body, query ho·∫∑c params
             const data =
             source === 'body' ? req.body :
             source === 'query' ? { ...req.query } : // ‚úÖ Copy ƒë·ªÉ tr√°nh l·ªói ki·ªÉu d·ªØ li·ªáu
             { ...req.params }; // ‚úÖ Copy params ƒë·ªÉ tr√°nh l·ªói

            // üîπ Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh DTO
            const dtoInstance = plainToInstance(DtoClass, data);
            // üîπ Th·ª±c hi·ªán validate
            const errors = await validate(dtoInstance);
            if (errors.length > 0) {
                const errorResponse = {
                    statusCode: 400,
                    message: 'Validation failed: '+ errors.map(err => 
                        `${err.property}: ${Object.values(err.constraints || {}).join(', ')}`
                    ).join('; '),
                };

                return ResponseHandler.sendError(res, errorResponse);
                // return res.status(400).json({
                //     success: false,
                //     errors: errors.map(err => ({
                //         field: err.property,
                //         messages: Object.values(err.constraints || {}),
                //     })),
                // });
            }

            // üîπ G√°n l·∫°i d·ªØ li·ªáu ƒë√£ validate v√†o request ƒë·ªÉ s·ª≠ d·ª•ng ti·∫øp trong controller
            if (source === 'body') req.body = dtoInstance;
            else if (source === 'query') req.query = dtoInstance as unknown as Record<string, any>; // ‚úÖ √âp ki·ªÉu ƒë·ªÉ tr√°nh l·ªói
            else req.params = dtoInstance as unknown as Record<string, string>;

            return next(); // ‚úÖ Lu√¥n g·ªçi next() n·∫øu validation th√†nh c√¥ng
        } catch (error) {
            next(error); // ‚úÖ ƒê·∫©y l·ªói xu·ªëng errorHandler n·∫øu c√≥ l·ªói kh√¥ng mong mu·ªën
        }
    };
};
